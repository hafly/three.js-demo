{"version":3,"sources":["pages/demo2/textures/world.png","pages/demo4/textures/guang2.jpg","App.js","pages/menu.js","components/shaders/GlowShader.js","pages/demo1/Glow.js","pages/demo1/index.js","components/shaders/EarthShader.js","components/shaders/AtmosphereShader.js","pages/demo2/Earth.js","pages/demo2/index.js","pages/demo3/FlowLight.js","pages/demo3/index.js","pages/demo4/Halo.js","pages/demo4/index.js","components/shaders/GradientShader.js","pages/demo5/Gradient.js","pages/demo5/index.js","components/shaders/SweepingLightShader.js","pages/demo6/SweepingLight.js","pages/demo6/index.js","router.js","index.js"],"names":["module","exports","App","this","props","children","React","Component","Menu","style","margin","href","GlowShader","Glow","container","scene","undefined","camera","renderer","controls","stats","update","bind","onWindowResize","init","initScene","initCamera","initLight","initModel","initRenderer","initGUI","bindEvent","THREE","Stats","appendChild","dom","clientWidth","clientHeight","position","set","target","add","directionalLight","material","uniforms","constant","type","value","force","glowColor","vertexShader","fragmentShader","side","blending","transparent","sphereGeo","sphereMesh","cubeGeo","cubeMesh","antialias","alpha","setClearColor","setSize","setPixelRatio","window","devicePixelRatio","domElement","self","params","bs","fs","nb","ab","color","gui","GUI","top","addFolder","min","max","step","name","onChange","addColor","setHex","replace","open","folder1","fsGUI","listen","bsGUI","setValue","folder2","nbGUI","abGUI","requestAnimationFrame","render","w","h","aspect","updateProjectionMatrix","OrbitControls","enableDamping","addEventListener","Demo1","document","title","ID","ref","width","height","EarthShader","AtmosphereShader","Earth","textureLoader","earthUniforms","clone","texture","load","require","earthMaterial","earthGeometry","rotateY","degToRad","earthMesh","atmosphereMaterial","atmosphereMesh","scale","earth","atmosphere","visible","Demo2","FlowLight","composer","flowLight","lightPath","index","initComposer","geometry","i","theta","Math","PI","x","pow","sin","y","cos","vertices","push","geometry2","autoClear","EffectComposer","renderPass","RenderPass","addPass","afterimagePass","AfterimagePass","clear","copy","length","Demo3","Halo","group_wheel","hemiLight","wheelGeometry","wheelMaterial","map","depthWrite","wheelLocation","wheel","rotation","Demo4","GradientShader","Gradient","Demo5","SweepingLightShader","tDiffuse","time","SweepingLight","effect","group","flatShading","mesh","random","needsUpdate","normalize","multiplyScalar","z","ShaderPass","IRouter","history","createBrowserHistory","path","component","exact","Demo6","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2431baa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.381c728e.png\";","module.exports = __webpack_public_path__ + \"static/media/guang2.4f4d986a.jpg\";","import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                {\n                    this.props.children\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\r\n\r\n// Glow Shader\r\nexport default class Menu extends React.Component {\r\n    render() {\r\n        const style = {margin: '10px'}\r\n        return (\r\n            <>\r\n                <div style={style}><a href=\"#demo1\">Glow Shader</a></div>\r\n                <div style={style}><a href=\"#demo2\">Eath Shader And Atmoshphere Sahder</a></div>\r\n                <div style={style}><a href=\"#demo3\">FlowLight1</a></div>\r\n                <div style={style}><a href=\"#demo4\">Halo</a></div>\r\n                <div style={style}><a href=\"#demo5\">Gradient</a></div>\r\n                <div style={style}><a href=\"#demo6\">SweepingLight</a></div>\r\n            </>\r\n        )\r\n    }\r\n}","// 边缘高亮\r\n// 这个着色器是根据法向量来改变颜色强度的\r\nconst GlowShader = {\r\n    uniforms: {},\r\n    vertexShader: `\r\n        uniform vec3 viewVector;\r\n        uniform float constant;\r\n        uniform float force;\r\n        varying float intensity;\r\n        void main()\r\n        {\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            \r\n            vec3 noraml1 = normalize(normalMatrix * normal);\r\n            vec3 noraml2 = normalize(normalMatrix * cameraPosition);\r\n            \r\n            // 强度在顶点着色器计算。法向量和相机视图向量的点乘，0平行1垂直\r\n            intensity = pow(constant - dot(noraml1, noraml2), force);\r\n        }\r\n    `,\r\n    fragmentShader: `\r\n        uniform vec3 glowColor;\r\n        varying float intensity;\r\n        void main()\r\n        {\r\n            vec3 glow = glowColor * intensity;\r\n            gl_FragColor = vec4(glow, 1.0);\r\n        }\r\n    `\r\n}\r\n\r\nexport {GlowShader};","import * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\nimport {GlowShader} from \"../../components/shaders/GlowShader\";\r\n\r\n// Glow Shader\r\nclass Glow {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n\r\n        this.controls = undefined;\r\n        this.stats = undefined;\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 400, 800);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n        this.scene.add(this.camera);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(1, 1, 1);\r\n        this.scene.add(directionalLight);\r\n    }\r\n\r\n    initModel() {\r\n        let material = new THREE.ShaderMaterial(\r\n            {\r\n                uniforms: {\r\n                    constant: {type: \"f\", value: 1.0},\r\n                    force: {type: \"f\", value: 1.4},\r\n                    glowColor: {type: \"c\", value: new THREE.Color(0xffff00)}\r\n                },\r\n                vertexShader: GlowShader.vertexShader,\r\n                fragmentShader: GlowShader.fragmentShader,\r\n                side: THREE.FrontSide,\r\n                blending: THREE.AdditiveBlending,\r\n                transparent: true\r\n            });\r\n\r\n        let sphereGeo = new THREE.SphereGeometry(100, 32, 32);\r\n        this.sphereMesh = new THREE.Mesh(sphereGeo, material);\r\n        this.sphereMesh.position.set(-150, 0, 0);\r\n        this.scene.add(this.sphereMesh);\r\n\r\n        let cubeGeo = new THREE.CubeGeometry(150, 150, 150, 2, 2, 2);\r\n        this.cubeMesh = new THREE.Mesh(cubeGeo, material);\r\n        this.cubeMesh.position.set(150, 0, 0);\r\n        this.scene.add(this.cubeMesh);\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    initGUI() {\r\n        let self = this;\r\n        let params = {\r\n            constant: 1.0,\r\n            force: 1.4,\r\n            bs: false,\r\n            fs: true,\r\n            nb: false,\r\n            ab: true,\r\n            color: \"#ffff00\"\r\n        };\r\n\r\n        let gui = new GUI();\r\n\r\n        let top = gui.addFolder('Glow Shader Attributes');\r\n\r\n        top.add(params, 'constant').min(0.0).max(1.0).step(0.01).name(\"constant\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"constant\"].value = value;\r\n        });\r\n        top.add(params, 'force').min(0.0).max(6.0).step(0.01).name(\"force\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"force\"].value = value\r\n        });\r\n        top.addColor(params, 'color').name('Glow Color').onChange(function (value) {\r\n            self.sphereMesh.material.uniforms.glowColor.value.setHex(value.replace(\"#\", \"0x\"));\r\n        });\r\n        top.open();\r\n\r\n        // toggle front side / back side\r\n        let folder1 = gui.addFolder('Render side');\r\n        let fsGUI = folder1.add(params, 'fs').name(\"THREE.FrontSide\").listen();\r\n        fsGUI.onChange(function (value) {\r\n            if (value) {\r\n                bsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.FrontSide;\r\n            }\r\n        });\r\n        let bsGUI = folder1.add(params, 'bs').name(\"THREE.BackSide\").listen();\r\n        bsGUI.onChange(function (value) {\r\n            if (value) {\r\n                fsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.BackSide;\r\n            }\r\n        });\r\n        folder1.open();\r\n\r\n        // toggle normal blending / additive blending\r\n        let folder2 = gui.addFolder('Blending style');\r\n        let nbGUI = folder2.add(params, 'nb').name(\"THREE.NormalBlending\").listen();\r\n        nbGUI.onChange(function (value) {\r\n            if (value) {\r\n                abGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.NormalBlending;\r\n            }\r\n        });\r\n        let abGUI = folder2.add(params, 'ab').name(\"THREE.AdditiveBlending\").listen();\r\n        abGUI.onChange(function (value) {\r\n            if (value) {\r\n                nbGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.AdditiveBlending;\r\n            }\r\n        });\r\n        folder2.open();\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {Glow};","import React from 'react';\r\nimport {Glow} from \"./Glow\";\r\n\r\n// Glow Shader\r\nexport default class Demo1 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.title = 'Glow Shader';\r\n        new Glow(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","// 地球边缘高光\r\nconst EarthShader = {\r\n    uniforms: {\r\n        'texture': {type: 't', value: null}\r\n    },\r\n    vertexShader: `\r\n        varying vec3 vNormal;\r\n        varying vec2 vUv;\r\n        void main() {\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            vNormal = normalize(normalMatrix * normal);\r\n            vUv = uv;\r\n        }\r\n    `,\r\n    fragmentShader: `\r\n        uniform sampler2D texture;\r\n        varying vec3 vNormal;\r\n        varying vec2 vUv;\r\n        void main() {\r\n            vec3 diffuse = texture2D(texture, vUv).xyz;\r\n            float intensity = 1.1 - dot(vNormal, vec3(0.0, 0.0, 1.0));\r\n            vec3 atmosphere = vec3(1.0, 1.0, 1.0) * pow(intensity, 3.0);\r\n            gl_FragColor = vec4(diffuse + atmosphere, 1.0);\r\n        }\r\n    `\r\n};\r\n\r\nexport {EarthShader};","// 大气层效果\r\nconst AtmosphereShader = {\r\n    uniforms: {\r\n        'constant': {type: 'f', value: 0.8}\r\n    },\r\n    vertexShader: `\r\n        varying vec3 vNormal;\r\n        void main() {\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n         \r\n            vNormal = normalize(normalMatrix * normal);\r\n        }\r\n    `,\r\n    fragmentShader: `\r\n        precision mediump float;\r\n        uniform float constant;\r\n        varying vec3 vNormal;\r\n        void main() {\r\n            // 强度在片元着色器计算。法向量和视图向量的点乘，0平行1垂直\r\n            float intensity = pow(constant - dot(vNormal, vec3(0, 0, 1.0)), 10.0);\r\n            gl_FragColor = vec4(1.0, 1.0, 1.0, intensity);\r\n        }\r\n    `\r\n}\r\n\r\nexport {AtmosphereShader};","import * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\nimport {EarthShader} from \"../../components/shaders/EarthShader\";\r\nimport {AtmosphereShader} from \"../../components/shaders/AtmosphereShader\";\r\n\r\n// Eath Shader And Atmoshphere Sahder\r\nclass Earth {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n\r\n        this.controls = undefined;\r\n        this.stats = undefined;\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 280, 350);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n        this.scene.add(this.camera);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(1, 1, 1);\r\n        this.scene.add(directionalLight);\r\n    }\r\n\r\n    initModel() {\r\n        let textureLoader = new THREE.TextureLoader();\r\n\r\n        let earthUniforms = THREE.UniformsUtils.clone(EarthShader.uniforms)\r\n        let texture = textureLoader.load(require('./textures/world.png'));\r\n        earthUniforms['texture'].value = texture;\r\n\r\n        let earthMaterial = new THREE.ShaderMaterial({\r\n            uniforms: earthUniforms,\r\n            vertexShader: EarthShader.vertexShader,\r\n            fragmentShader: EarthShader.fragmentShader,\r\n            blending: THREE.AdditiveBlending,\r\n            transparent: true\r\n        });\r\n\r\n        let earthGeometry = new THREE.SphereGeometry(100, 32, 32);\r\n        earthGeometry.rotateY(THREE.Math.degToRad(-90));\r\n\r\n        this.earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);\r\n        this.scene.add(this.earthMesh);\r\n\r\n        // 光环\r\n        let atmosphereMaterial = new THREE.ShaderMaterial({\r\n            uniforms: THREE.UniformsUtils.clone(AtmosphereShader.uniforms),\r\n            vertexShader: AtmosphereShader.vertexShader,\r\n            fragmentShader: AtmosphereShader.fragmentShader,\r\n            side: THREE.BackSide,\r\n            blending: THREE.AdditiveBlending,\r\n            transparent: true\r\n        });\r\n\r\n        this.atmosphereMesh = new THREE.Mesh(earthGeometry, atmosphereMaterial);\r\n        this.atmosphereMesh.scale.set(1.1, 1.1, 1.1);\r\n        this.scene.add(this.atmosphereMesh);\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    initGUI() {\r\n        let self = this;\r\n        let params = {\r\n            earth: true,\r\n            atmosphere: true,\r\n            constant: 0.8\r\n        };\r\n\r\n        let gui = new GUI();\r\n\r\n        gui.add(params, 'earth').name(\"earth visible\").onChange(function (value) {\r\n            self.earthMesh.visible = value;\r\n        });\r\n        gui.add(params, 'atmosphere').name(\"atmosphere visible\").onChange(function (value) {\r\n            self.atmosphereMesh.visible = value;\r\n        });\r\n\r\n        gui.add(params, 'constant').name(\"constant\").min(0.0).max(1.0).step(0.01).onChange(function (value) {\r\n            self.atmosphereMesh.material.uniforms['constant'].value = value;\r\n        });\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {Earth};","import React from 'react';\r\nimport {Earth} from \"./Earth\";\r\n\r\n// Glow Shader\r\nexport default class Demo2 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        new Earth(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\nimport {EffectComposer} from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport {AfterimagePass} from 'three/examples/jsm/postprocessing/AfterimagePass.js';\r\n\r\n// 流光，使用AfterimagePass实现\r\nclass FlowLight {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n        this.composer = undefined;\r\n\r\n        this.controls = undefined;\r\n        this.stats = undefined;\r\n\r\n        this.flowLight = undefined;\r\n        this.lightPath = undefined;\r\n        this.index = 0;\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        this.initComposer();\r\n        this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 0, 100);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(1, 1, 1);\r\n        this.scene.add(directionalLight);\r\n    }\r\n\r\n    initModel() {\r\n        let geometry = new THREE.Geometry();\r\n        // 顶点数\r\n        let n = 400;\r\n        // 桃心缩放系数\r\n        let a = 1.5;\r\n\r\n        // 桃心方程\r\n        for (let i = 1; i < n; i++) {\r\n            let theta = i * 2.0 * Math.PI / n;\r\n            let x = 16 * Math.pow(Math.sin(theta), 3);\r\n            let y = 13 * Math.cos(theta) - 5 * Math.cos(2 * theta) - 2 * Math.cos(3 * theta) - Math.cos(4 * theta);\r\n            geometry.vertices.push(new THREE.Vector3(a * x, a * y, 0));\r\n        }\r\n\r\n        // 流光的路线\r\n        this.lightPath = new THREE.Line(geometry, new THREE.LineBasicMaterial({color: 0xff0000}));\r\n        this.scene.add(this.lightPath);\r\n\r\n        // 流光\r\n        let geometry2 = new THREE.SphereBufferGeometry(0.5, 64, 64)\r\n        this.flowLight = new THREE.Mesh(geometry2, new THREE.MeshBasicMaterial({color: 0xff0000}));\r\n        this.scene.add(this.flowLight);\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.autoClear = false;\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    initComposer() {\r\n        this.composer = new EffectComposer(this.renderer);\r\n        let renderPass = new RenderPass(this.scene, this.camera); // 保存渲染结果，但不会输出到屏幕\r\n        this.composer.addPass(renderPass);\r\n\r\n        let afterimagePass = new AfterimagePass();\r\n        afterimagePass.uniforms[\"damp\"].value = 0.98\r\n        this.composer.addPass(afterimagePass);\r\n    }\r\n\r\n    initGUI() {\r\n        let gui = new GUI();\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n\r\n        this.renderer.clear();\r\n\r\n        this.flowLight.position.copy(this.lightPath.geometry.vertices[this.index]);\r\n        this.index++;\r\n        if (this.index === this.lightPath.geometry.vertices.length) this.index = 0;\r\n\r\n        this.composer.render();\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {FlowLight};","import React from 'react';\r\nimport {FlowLight} from \"./FlowLight\";\r\n\r\n// Glow Shader\r\nexport default class Demo3 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.title = 'Flow Light';\r\n        new FlowLight(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\n\r\nclass Halo {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n\r\n        this.controls = undefined;\r\n\r\n        this.group_wheel = [];\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 100, 100);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(0, 200, 100);\r\n        this.scene.add(directionalLight);\r\n\r\n        let hemiLight = new THREE.HemisphereLight(0xffffff, 0x000000, 2.0);\r\n        hemiLight.position.set(0, 500, 0);\r\n        this.scene.add(hemiLight);\r\n    }\r\n\r\n    initModel() {\r\n        let self = this;\r\n        let wheelGeometry = new THREE.PlaneBufferGeometry(10, 10);\r\n        let wheelMaterial = new THREE.MeshStandardMaterial({\r\n            map: new THREE.TextureLoader().load(require(\"./textures/guang2.jpg\")),\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false\r\n        });\r\n        let wheelLocation = [\r\n            [-20, 0, 0],\r\n            [-10, 0, 0],\r\n            [0, 0, 0],\r\n            [10, 0, 0],\r\n            [20, 0, 0],\r\n        ]\r\n\r\n        for (let i = 0; i < wheelLocation.length; i++) {\r\n            let wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);\r\n            wheel.position.set(wheelLocation[i][0], wheelLocation[i][1], wheelLocation[i][2]);\r\n            wheel.rotation.set(-Math.PI / 2, 0, 0);\r\n            self.scene.add(wheel);\r\n            self.group_wheel.push(wheel);\r\n        }\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    initGUI() {\r\n        let gui = new GUI();\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {Halo};","import React from 'react';\r\nimport {Halo} from \"./Halo\";\r\n\r\n// Halo\r\nexport default class Demo4 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.title = 'Halo';\r\n        new Halo(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","// 透明渐变\r\nconst GradientShader = {\r\n    uniforms: {},\r\n    vertexShader: `\r\n        varying vec3 iPosition;\r\n        void main(){\r\n            iPosition = position;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n    `,\r\n    fragmentShader: `\r\n        varying vec3 iPosition;\r\n        uniform float time;\r\n        void main(){\r\n            vec3 color = vec3(89./255.,208./255.,255./255.);\r\n            float height = iPosition.y + 15.;\r\n            float white = (distance(vec2(iPosition.x,iPosition.z),vec2(0.0))-6.0)/(6.0 * (sqrt(2.0)-1.0));\r\n            float alphax = smoothstep(0.0,1.0,white );\r\n            float alphay = smoothstep(1.0,0.0,height/25.0 + sin(time) * 0.2 );\r\n            if(height<0.1||height>29.9){\r\n                discard;\r\n            }\r\n            gl_FragColor = vec4(color +vec3(255.,0.,0.)* alphax * 0.0008,alphay*0.7);  \r\n        }\r\n    `\r\n}\r\n\r\nexport {GradientShader};","import * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\nimport {GradientShader} from \"../../components/shaders/GradientShader\";\r\n\r\n// Gradient Shader\r\nclass Gradient {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n\r\n        this.controls = undefined;\r\n        this.stats = undefined;\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 400, 800);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n        this.scene.add(this.camera);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(1, 1, 1);\r\n        this.scene.add(directionalLight);\r\n    }\r\n\r\n    initModel() {\r\n        let material = new THREE.ShaderMaterial(\r\n            {\r\n                uniforms: {\r\n                    constant: {type: \"f\", value: 1.0},\r\n                    force: {type: \"f\", value: 1.4},\r\n                    glowColor: {type: \"c\", value: new THREE.Color(0xffff00)}\r\n                },\r\n                vertexShader: GradientShader.vertexShader,\r\n                fragmentShader: GradientShader.fragmentShader,\r\n                side: THREE.DoubleSide,\r\n                blending: THREE.AdditiveBlending,\r\n                transparent: true\r\n            });\r\n\r\n        let sphereGeo = new THREE.SphereGeometry(100, 32, 32);\r\n        this.sphereMesh = new THREE.Mesh(sphereGeo, material);\r\n        this.sphereMesh.position.set(-150, 0, 0);\r\n        this.scene.add(this.sphereMesh);\r\n\r\n        let cubeGeo = new THREE.CubeGeometry(150, 150, 150, 2, 2, 2);\r\n        this.cubeMesh = new THREE.Mesh(cubeGeo, material);\r\n        this.cubeMesh.position.set(150, 0, 0);\r\n        this.scene.add(this.cubeMesh);\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    initGUI() {\r\n        let self = this;\r\n        let params = {\r\n            constant: 1.0,\r\n            force: 1.4,\r\n            bs: false,\r\n            fs: true,\r\n            nb: false,\r\n            ab: true,\r\n            color: \"#ffff00\"\r\n        };\r\n\r\n        let gui = new GUI();\r\n\r\n        let top = gui.addFolder('Glow Shader Attributes');\r\n\r\n        top.add(params, 'constant').min(0.0).max(1.0).step(0.01).name(\"constant\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"constant\"].value = value;\r\n        });\r\n        top.add(params, 'force').min(0.0).max(6.0).step(0.01).name(\"force\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"force\"].value = value\r\n        });\r\n        top.addColor(params, 'color').name('Glow Color').onChange(function (value) {\r\n            self.sphereMesh.material.uniforms.glowColor.value.setHex(value.replace(\"#\", \"0x\"));\r\n        });\r\n        top.open();\r\n\r\n        // toggle front side / back side\r\n        let folder1 = gui.addFolder('Render side');\r\n        let fsGUI = folder1.add(params, 'fs').name(\"THREE.FrontSide\").listen();\r\n        fsGUI.onChange(function (value) {\r\n            if (value) {\r\n                bsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.FrontSide;\r\n            }\r\n        });\r\n        let bsGUI = folder1.add(params, 'bs').name(\"THREE.BackSide\").listen();\r\n        bsGUI.onChange(function (value) {\r\n            if (value) {\r\n                fsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.BackSide;\r\n            }\r\n        });\r\n        folder1.open();\r\n\r\n        // toggle normal blending / additive blending\r\n        let folder2 = gui.addFolder('Blending style');\r\n        let nbGUI = folder2.add(params, 'nb').name(\"THREE.NormalBlending\").listen();\r\n        nbGUI.onChange(function (value) {\r\n            if (value) {\r\n                abGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.NormalBlending;\r\n            }\r\n        });\r\n        let abGUI = folder2.add(params, 'ab').name(\"THREE.AdditiveBlending\").listen();\r\n        abGUI.onChange(function (value) {\r\n            if (value) {\r\n                nbGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.AdditiveBlending;\r\n            }\r\n        });\r\n        folder2.open();\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {Gradient};","import React from 'react';\r\nimport {Gradient} from \"./Gradient\";\r\n\r\n// 局部辉光测试\r\nexport default class Demo5 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.title = '发光墙';\r\n        new Gradient(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","// 扫光效果\r\nconst SweepingLightShader = {\r\n    uniforms: {\r\n        tDiffuse: {type: \"t\", value: null},\r\n        time: {type: \"f\", value: -1.0}\r\n    },\r\n    vertexShader: `\r\n        varying vec2 vUv;\r\n        varying vec3 iPosition;\r\n        void main(){\r\n            vUv = uv;\r\n            iPosition = position;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n    `,\r\n    fragmentShader: `\r\n        uniform float time;\r\n        uniform sampler2D tDiffuse;\r\n        varying vec2 vUv;\r\n        varying vec3 iPosition;\r\n        void main(){\r\n            vec4 texel = texture2D(tDiffuse, vUv);\r\n            float x = iPosition.x;\r\n            float lighty = -x*1.2 + time;\r\n            float alpha = abs(iPosition.y - lighty);\r\n            if(alpha < 0.1){\r\n                float a = 1.0 -  alpha / 0.1;\r\n                float enda = smoothstep(0.0,1.0,a) + 1.0;\r\n                gl_FragColor = texel * enda;\r\n            }else{\r\n                gl_FragColor = texel;\r\n            }\r\n        }\r\n    `\r\n}\r\n\r\nexport {SweepingLightShader};","import * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\n\r\nimport {EffectComposer} from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport {ShaderPass} from 'three/examples/jsm/postprocessing/ShaderPass.js';\r\nimport {SweepingLightShader} from \"../../components/shaders/SweepingLightShader\";\r\n\r\n// Gradient Shader\r\nclass SweepingLight {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.scene = undefined;\r\n        this.camera = undefined;\r\n        this.renderer = undefined;\r\n        this.composer = undefined;\r\n        this.effect = undefined;\r\n\r\n        this.controls = undefined;\r\n        this.stats = undefined;\r\n        this.type = 'add';\r\n\r\n        this.update = this.update.bind(this);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n\r\n        this.init();\r\n        this.update();\r\n    }\r\n\r\n    init() {\r\n        this.initScene();\r\n        this.initCamera();\r\n        this.initLight();\r\n        this.initModel();\r\n        this.initRenderer();\r\n        // this.initGUI();\r\n\r\n        this.bindEvent();\r\n    }\r\n\r\n    initScene() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.stats = new Stats();\r\n        this.container.appendChild(this.stats.dom);\r\n    }\r\n\r\n    initCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(30, this.container.clientWidth / this.container.clientHeight, 1, 10000);\r\n        this.camera.position.set(0, 400, 800);\r\n        this.camera.target = new THREE.Vector3(0, 0, 0);\r\n        this.scene.add(this.camera);\r\n    }\r\n\r\n    initLight() {\r\n        let directionalLight = new THREE.DirectionalLight(0xffffff);\r\n        directionalLight.position.set(1, 1, 1);\r\n        this.scene.add(directionalLight);\r\n    }\r\n\r\n    initModel() {\r\n        let group = new THREE.Group();\r\n        for (var i = 0; i < 100; i++) {\r\n            var geometry = new THREE.SphereBufferGeometry(1, 4, 4);\r\n            var material = new THREE.MeshPhongMaterial({color: 0xffffff, flatShading: true});\r\n            var mesh = new THREE.Mesh(geometry, material);\r\n            mesh.material = new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(Math.random(), Math.random(), Math.random()),\r\n                flatShading: true\r\n            });\r\n            mesh.material.needsUpdate = true;\r\n\r\n            mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\r\n            mesh.position.multiplyScalar(Math.random() * 400);\r\n            mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);\r\n            mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;\r\n            group.add(mesh);\r\n        }\r\n        this.scene.add(group);\r\n    }\r\n\r\n    initRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n        this.renderer.setClearColor(0x000000);\r\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.container.appendChild(this.renderer.domElement);\r\n\r\n        this.composer = new EffectComposer(this.renderer);\r\n        this.composer.addPass(new RenderPass(this.scene, this.camera));\r\n\r\n        this.effect = new ShaderPass(SweepingLightShader);\r\n        this.composer.addPass(this.effect);\r\n    }\r\n\r\n    initGUI() {\r\n        let self = this;\r\n        let params = {\r\n            constant: 1.0,\r\n            force: 1.4,\r\n            bs: false,\r\n            fs: true,\r\n            nb: false,\r\n            ab: true,\r\n            color: \"#ffff00\"\r\n        };\r\n\r\n        let gui = new GUI();\r\n\r\n        let top = gui.addFolder('Glow Shader Attributes');\r\n\r\n        top.add(params, 'constant').min(0.0).max(1.0).step(0.01).name(\"constant\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"constant\"].value = value;\r\n        });\r\n        top.add(params, 'force').min(0.0).max(6.0).step(0.01).name(\"force\").onChange(function (value) {\r\n            self.sphereMesh.material.uniforms[\"force\"].value = value\r\n        });\r\n        top.addColor(params, 'color').name('Glow Color').onChange(function (value) {\r\n            self.sphereMesh.material.uniforms.glowColor.value.setHex(value.replace(\"#\", \"0x\"));\r\n        });\r\n        top.open();\r\n\r\n        // toggle front side / back side\r\n        let folder1 = gui.addFolder('Render side');\r\n        let fsGUI = folder1.add(params, 'fs').name(\"THREE.FrontSide\").listen();\r\n        fsGUI.onChange(function (value) {\r\n            if (value) {\r\n                bsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.FrontSide;\r\n            }\r\n        });\r\n        let bsGUI = folder1.add(params, 'bs').name(\"THREE.BackSide\").listen();\r\n        bsGUI.onChange(function (value) {\r\n            if (value) {\r\n                fsGUI.setValue(false);\r\n                self.sphereMesh.material.side = THREE.BackSide;\r\n            }\r\n        });\r\n        folder1.open();\r\n\r\n        // toggle normal blending / additive blending\r\n        let folder2 = gui.addFolder('Blending style');\r\n        let nbGUI = folder2.add(params, 'nb').name(\"THREE.NormalBlending\").listen();\r\n        nbGUI.onChange(function (value) {\r\n            if (value) {\r\n                abGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.NormalBlending;\r\n            }\r\n        });\r\n        let abGUI = folder2.add(params, 'ab').name(\"THREE.AdditiveBlending\").listen();\r\n        abGUI.onChange(function (value) {\r\n            if (value) {\r\n                nbGUI.setValue(false);\r\n                self.sphereMesh.material.blending = THREE.AdditiveBlending;\r\n            }\r\n        });\r\n        folder2.open();\r\n    }\r\n\r\n    update() {\r\n        requestAnimationFrame(this.update);\r\n        this.composer.render(this.scene, this.camera);\r\n\r\n        this.controls.update();\r\n        this.stats.update();\r\n\r\n        var time = this.effect.uniforms.time.value;\r\n        if (time > 1.0) {\r\n            this.type = 'reduce'\r\n        } else if (time < -1.0) {\r\n            this.type = 'add';\r\n        }\r\n        if (this.type == 'add') {\r\n            this.effect.uniforms.time.value += 0.01;\r\n        } else {\r\n            this.effect.uniforms.time.value -= 0.01;\r\n        }\r\n    }\r\n\r\n    onWindowResize() {\r\n        let w = this.container.clientWidth;\r\n        let h = this.container.clientHeight;\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize(w, h);\r\n        this.composer.setSize(w, h);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n\r\n        window.addEventListener('resize', this.onWindowResize, false);\r\n    }\r\n}\r\n\r\nexport {SweepingLight};","import React from 'react';\r\nimport {SweepingLight} from \"./SweepingLight\";\r\n\r\n// 扫光效果\r\nexport default class Demo5 extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.title = '发光墙';\r\n        new SweepingLight(this.ID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ID => this.ID = ID} style={{width: '100%', height: '100vh'}}></div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport App from './App';\r\nimport Menu from './pages/menu';\r\nimport Demo1 from './pages/demo1';\r\nimport Demo2 from './pages/demo2';\r\nimport Demo3 from './pages/demo3';\r\nimport Demo4 from './pages/demo4';\r\nimport Demo5 from './pages/demo5';\r\nimport Demo6 from './pages/demo6';\r\n\r\nexport default class IRouter extends React.Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <App history={createBrowserHistory()}>\r\n                    <Route path=\"/\" component={Menu} exact/>\r\n                    <Route path=\"/demo1\" component={Demo1} name=\"Glow Shader\"/>\r\n                    <Route path=\"/demo2\" component={Demo2} name=\"Eath Shader And Atmoshphere Sahder\"/>\r\n                    <Route path=\"/demo3\" component={Demo3} name=\"FlowLight1\"/>\r\n                    <Route path=\"/demo4\" component={Demo4} name=\"Halo\"/>\r\n                    <Route path=\"/demo5\" component={Demo5} name=\"Gradient\"/>\r\n                    <Route path=\"/demo6\" component={Demo6} name=\"SweepingLight\"/>\r\n                </App>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './router';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}